<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.1.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/upload/**" location="/upload/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="2"></beans:property>
	</beans:bean>
	
	<beans:bean class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView" />
		<beans:property name="order" value="1" />
	</beans:bean>

	<beans:bean class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<beans:property name="definitions" value="/WEB-INF/tiles.xml" />
	</beans:bean>
	
	<beans:bean id="naverClientID" class="java.lang.String">
        <beans:constructor-arg value="vw9E3AbSUfGi423uB49O" />
	</beans:bean>
	<beans:bean id="naverClientSecret" class="java.lang.String">
        <beans:constructor-arg value="p9wbBdbvuN" />
	</beans:bean>
	<beans:bean id="naverRedirectUrl" class="java.lang.String">
        <beans:constructor-arg value="http://localhost:8080/member/auth/naver/callback" />
	</beans:bean>
	    
	<beans:bean id="naverSns" class="com.pinmarket.util.naver.SnsValue">
        <beans:constructor-arg value="naver" />
        <beans:constructor-arg ref="naverClientID" />
        <beans:constructor-arg ref="naverClientSecret" />
        <beans:constructor-arg ref="naverRedirectUrl" />
	</beans:bean>
	
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="defaultEncoding" value="utf-8" />
		<!-- 100 * 1024 * 1024 = 100MB : 한번에 올릴 수 있는 파일의 최대 크기 -->
		<beans:property name="maxUploadSize" value="104857600" />
		<!-- 10 * 1024 * 1024 = 10MB : 한개의 파일 최대 크기 -->
		<beans:property name="maxUploadSizePerFile" value="10485760" />
		<!-- 임시 폴더를 지정해준다. - 호스팅할경우 os가 달라 경로 구분이 다르기때문에 여기서 오류가 생길수 있다. 그래서 굳이 지정하지 않고 기본값으로 해놓은다. -->
		<!-- <beans:property name="uploadTempDir" value="file:\C:\ftemp"></beans:property> -->
		<!-- 1 * 1024 * 1024 = 1MB : 특정 크기에서 메모리를 사용 할 건지 지정 - 만일 아래 지정한 크기 이상의 데이터는 임시 파일로 저장된다. -->
		<!-- 즉, 크기가 크면 임시파일에 저장 작으면 메모리에 저장한다.(메모리를 활용하면 더 빠름) -->
		<beans:property name="maxInMemorySize" value="1048576" />
	</beans:bean>
	
	<!-- servlet-context.xml -->
	<interceptors>
		<interceptor>
			<mapping path="/member/**"/>
			<exclude-mapping path="/member/logout"/>
			<beans:bean id="nonLoginInterceptor" class="com.pinmarket.interceptor.MemberInterceptor"/>
		</interceptor>
		<interceptor>
			<mapping path="/main/**"/>
			<mapping path="/auction/**"/>
			<mapping path="/notice/**"/>
			<mapping path="/product/**"/>
			<mapping path="/mypage/**"/>
			<exclude-mapping path="/member/**"/>
			<beans:bean id="okLoginInterceptor" class="com.pinmarket.interceptor.LoginOkInterceptor"/>
		</interceptor>
	</interceptors>
	
	<!-- 핸들러 클래스 빈 설정 -->
	<beans:bean id="ChatEchochoHandler" class="com.pinmarket.util.ChatEchoHandler" />
	
	<!-- 해당 경로로 들어 올때  ChatEchochoHandler 클래스와 매핑 시키고-->
	<!-- interceptors로  HttpSessionHandshakeInterceptor를 실행 시켜 http 세션과 webSocket 세션을 동기화 시킨다.-->
	<websocket:handlers>
		<websocket:mapping handler="ChatEchochoHandler" path="/chatEcho" />
		<websocket:handshake-interceptors>
			<beans:bean	class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor"/>
		</websocket:handshake-interceptors>
	</websocket:handlers>
	
	<!-- 스케쥴러 -->
	<context:component-scan base-package="com.scheduler" />
	<task:scheduler id="auctionStatusScheduler" pool-size="5"/>
	<task:annotation-driven scheduler="auctionStatusScheduler"/>
	
	<context:component-scan base-package="com.pinmarket.controller" />
	<context:component-scan base-package="com.pinmarket.apiController" />
	<context:component-scan base-package="com.pinmarket.service" />
	<context:component-scan base-package="com.pinmarket.mapper" />	
		
</beans:beans>
